[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "The data that has been used in this study in gathered from a mobile game that can be played on an Android operating system.\nThe data has a total of 24762 observations and 66 variables. In the game there is a spinning ball in the middle and the player throws arrows to the spinning ball by touching the screen, if the arrows hit on another but not the spinning ball, the player has to repeat the level.\nThere are 200 levels and each level gets more difficult gradually.The importance of the Datasets is, they have been collected detailed and the sample size is enough to make interpretation. Also the sample size is not too large to cause any kind of problems, therefore no subsample has been taken. The original dataset is in json format and has to be cleaned, the variable names have to be adjusted and the types of the columns should be corrected.\nIf you haven’t seen a json data yet, this is how it looks like :\n\nSo as you can see, the data is very hard to understand and analyse.\nSo we had to change the format to a csv.\n\nNow it looks better :)\nThe game has been available to users for a while (2012). A lot of data was collected during this time. From which country the users are in to which phone they use.\nThere are also interesting things. There are even information about how much time players spent on each level, their success rates in the levels, and the android version they used.\nBased on what we know, we wondered about some things and wanted to visualize them and share the results we found with you.\nA few things we will cover up :\nResearch Question 1:\n\nHow does the distribution of players vary across continents and countries in the game, and are there noticeable patterns in user engagement based on continent?\n\nResearch Question 2:\n\nWhat is the distribution of the maximum level attained by users in the game, analyzed in conjunction with their respective continents ?\nAre there significant variations in the maximum level achieved, and do these patterns differ across continents ?”\n\nResearch Question 3:\n\nHow does user engagement differ across mobile device categories in the game? Furthermore, are there variations in the maximum levels achieved by users within each category?\nThis analysis seeks to uncover patterns and disparities in user behavior based on the distinction between mobile and phone categories.”\n\nResearch Question 4:\n\nWhat is the distribution of successful trial frequencies at different levels within a mobile game?\n\nThe answers and visualizations to these questions will give us a better understanding of the game.\n\nThis is a photo of the 43th level. The screenshot is from my phone, I got to the 43th level in around 45 minutes, so you can see that the game isn’t that hard."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "Altan Sener 2429306\nAbdullah Mert Celikkol 2361210\nAlican Aktag 2347300\nFeel free to ask all your questions"
  },
  {
    "objectID": "index2_data_preperation.html",
    "href": "index2_data_preperation.html",
    "title": "Archery Game Data Preparation",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index3.html",
    "href": "index3.html",
    "title": "Archery Game Analysis",
    "section": "",
    "text": "Lets load our libraries, you can disable package loading warnings with warning = FALSE argument, bellow chunk is code only\n\n setwd(here::here())\n df=read.csv(\"plsfkinwork3.csv\")\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(jsonlite)\nlibrary(tidyr)\n\noptions(scipen=999)\ndf=df[,-1]\n\nFirstly lets plot a histogram of Session duration of users,\nThere are two ways to calculate it, first one is to get start timestamp of a session and end timestamp of it, take the difference and that is your duration .\nHowever since most users move their app to background while using their phones, scroll instagram, open snapchat and so on, Firebase datasets have another method to calculate user active duration.\nFirebase counts how long they users keep the app on foreground, and send total duration in micro seconds inside the event_params in a key named “engagement_time_msec”. We can sum engagement_time_msec by session and that would be the average active session duration\n\ndf$engagement_time_msec=as.numeric(df$engagement_time_msec)\ntotal_session_duration_per_user &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarize(total_engagement_time = sum(engagement_time_msec,na.rm = TRUE))\n\ntotal_session_duration_per_user$total_engagement_time=total_session_duration_per_user$total_engagement_time/60000\n\nhist(total_session_duration_per_user$total_engagement_time,breaks=50)\n\n\n\n\nOur data manipulation have worked and we are now capable of printing some histograms, however submitting such an Instagram can get you fired, or cause you to receive lower grades for this reason we will make a histogram with beautiful aesthetics , and definitely better breaks\n\nbreaks &lt;- c(0, 1, 2, 3, 5, 10, 20, 60, 1440)  \ntotal_session_duration_per_user$break_group &lt;- cut(total_session_duration_per_user$total_engagement_time, breaks = breaks, labels = FALSE, include.lowest = TRUE)\ncustom_labels &lt;- c(\"0-1\", \"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-20\", \"20-60\", \"60-1 day\", \"1 day+\")\n\nggplot(total_session_duration_per_user, aes(x = factor(break_group))) +\n  geom_bar(fill = \"blue\", color = \"black\", alpha = 0.7) +\n  scale_x_discrete(breaks = seq_along(breaks) - 1, labels = custom_labels) +\n  labs(title = \"Total Session Duration Histogram\",\n       x = \"Total Session Duration (minutes)\",\n       y = \"Frequency\")\n\n\n\n\nTotal session duration per user is visualized with comprehensible breaks. Gamers mostly prefer playing and closing the game in short durations; however, we suspect that there are also excessively long sessions due to the time when the game is running in the background and not actively being played.\n\ndistinct_sessions_per_user &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarize(distinct_session_count = n_distinct(ga_session_id))\n\n\nggplot(distinct_sessions_per_user, aes(x = distinct_session_count)) +\n  geom_histogram(fill = \"blue\", color = \"black\", alpha = 0.7, bins = 20) +\n  labs(title = \"Distinct Sessions per User Histogram\",\n       x = \"Distinct Session Count\",\n       y = \"Frequency\")\n\n\n\n\nThe repetition of playing the game by players within the range of our data is in line with the results of our previous analysis. Mostly, distinct players seem to have opened the game 1 or 2 times. There are also users who have opened more than 20 sessions, which may be considered as outliers.\n\ndf$user_first_touch_timestamp = as.numeric(df$user_first_touch_timestamp)\ndf$event_timestamp = as.numeric(df$event_timestamp)\n\nuser_ages &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarise(time_difference = max(event_timestamp) - max(user_first_touch_timestamp))\n\nuser_ages$time_difference= user_ages$time_difference/60000. #BURAYLA D0LGD0LD0 ANALD0Z YAPALIM!\n\nevent_counts &lt;- df %&gt;%\n  count(event_name)\n\nggplot(event_counts, aes(x = reorder(event_name, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Event Counts\",\n       x = \"Event Name\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n\n\n\nWe explained how we parsed the events in the first part. To get a preliminary idea about the diversity and distribution density of events in our dataset, we prepared a bar plot. Despite the recording of event data in different types, level_end has the largest share. This result will contribute to strengthening our interpretations in future analyses.\n\ndf$mobile_brand_name= as.factor(df$mobile_brand_name)\ndf$continent= as.factor(df$continent)\n\ndistinct_users &lt;- df %&gt;%\n  select(user_pseudo_id, continent) %&gt;%\n  distinct()\n\nggplot(distinct_users, aes(x = continent)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Distinct Users Across Continents\",\n       x = \"Continent\",\n       y = \"Number of Distinct Users\") +\n  theme_minimal()\n\n\n\n\nOur first research question was: “How does the distribution of players vary across continents and countries in the game, and are there noticeable patterns in user engagement based on continent?”\nTo answer this question, distinct users are selected at first. Then, a bar plot for the distribution of distinct users across continents is created. According to this part of the question, it is observed that users from Asia contribute the most to the intercontinental distribution with 175 users. The participation numbers in the continents of Europe and America are below 25.\n\nusers_per_country &lt;- df %&gt;%\n  group_by(continent, country) %&gt;%\n  summarise(distinct_user_count = n_distinct(user_pseudo_id))\n\nusers_per_country_filtered &lt;- users_per_country %&gt;%\n  filter(distinct_user_count &gt; 3)\n\nusers_per_country_filtered &lt;- users_per_country_filtered %&gt;%\n  arrange(desc(distinct_user_count)) %&gt;%\n  mutate(country_display = ifelse(country == \"T&lt;U+00FC&gt;rkiye\", \"Turkey\", country))\n\nggplot(users_per_country_filtered, aes(x = reorder(country_display, distinct_user_count), y = distinct_user_count, size = distinct_user_count, color = continent)) +\n  geom_point() +\n  scale_size_continuous(name = \"Distinct User Count\", range = c(5, 17)) +\n  labs(title = \"Bubble Chart of Distinct Users by Country\",\n       x = \"Country\",\n       y = \"Distinct User Count\",\n       color = \"Continent\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n\nWhen we examine the question with a more general visualization, it is noticeable that the blue colored Asian countries - colors are indicating continental differences - are dominant both in terms of diversity and frequency. The size of the bubbles indicates the magnitude of the distinct user count. It can be commented that more than 30 distinct users from Egypt and Turkey have been actively engaged in the game.\n\nmax_level_data &lt;- df %&gt;%\n  group_by(user_pseudo_id, continent) %&gt;%\n  summarize(max_level = max(level, na.rm = TRUE))\n\nggplot(max_level_data, aes(x = continent, y = max_level,fill = continent)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Maximum Level by Continent\",\n       x = \"Continent\",\n       y = \"Max Level\"\n       ) +\n  theme_minimal()\n\n\n\n\nThe second research question was: “What is the distribution of the maximum level attained by users in the game, analyzed in conjunction with their respective continents? Are there significant variations in the maximum level achieved, and do these patterns differ across continents?”\nThe maximum levels that each user played is selected at first. Then, to answer the question, boxplot of the continents is created. Although there seems to be a similar distribution overall, there are more user outliers in Africa and Asia. One of the reasons for this is the uneven distribution of users on the continents, as seen in our previous graphs. Nevertheless, the difference between the 1st and 3rd quartiles in the African continent is striking, and it is observed that Asia has the highest median value.\n\ndistinct_users_category &lt;- df %&gt;%\n  select(user_pseudo_id, category) %&gt;%\n  distinct()\n\n\nggplot(distinct_users_category, aes(x = category)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Distinct Users Across Categories\",\n       x = \"Category\",\n       y = \"Number of Distinct Users\") +\n  theme_minimal()\n\n\n\n\nResearch Question 3 covers “How does user engagement differ across mobile device categories in the game? Furthermore, are there variations in the maximum levels achieved by users within each category?”\nThis analysis seeks to uncover patterns and disparities in user behavior based on the distinction between mobile and phone categories. Distinct users and their associated category is selected and it is observed that users generally prefer playing from their mobile phones.\n\nmax_level_data_category &lt;- df %&gt;%\n  group_by(user_pseudo_id, category) %&gt;%\n  summarize(max_level = max(level, na.rm = TRUE))\n\nggplot(max_level_data_category, aes(x = category, y = max_level,fill = category)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Maximum Level by Category\",\n       x = \"Category\",\n       y = \"Max Level\",\n       fill = \"Category\") +\n  theme_minimal()\n\n\n\n\nWhen comparing users’ achievements in reaching the maximum levels through box plots, no significant difference has been observed.\n\nsuccess_data &lt;- df %&gt;%\n  filter(event_name == \"level_end\" & success == 1)\n\nleveltrialcountbyuser_wsuccess &lt;- success_data %&gt;%\n  group_by(user_pseudo_id, level) %&gt;%\n  summarise(trials = n())\n\nleveltrialcountbyuser_wsuccess &lt;- leveltrialcountbyuser_wsuccess %&gt;%\n  group_by(level) %&gt;%\n  summarise(distinct_user_count = n(), trials = sum(trials))\n\nggplot(leveltrialcountbyuser_wsuccess, aes(x = level, y = distinct_user_count, fill = factor(level))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Frequency of Trials at Each Level\",\n       x = \"Level\",\n       y = \"Frequency\",\n       fill = \"Level\") +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),  \n        legend.position = \"none\")\n\n\n\n\nFinal research question is “What is the distribution of successful trial frequencies at different levels within the game?” As a continuation of the research on levels, we can comment on whether players go back and replay the same level or which level they can pass more easily. It seems that the points where the drop in the graph is broken are around levels 17 and 26. After level 50, the total number of attempts decreases below 15.\n\nleveltrialcountbyuser =df |&gt; filter(event_name==\"level_end\") |&gt; \n  group_by(level) |&gt; count(level)\n\nlevelsuccesscountbyuser =df |&gt; filter(event_name==\"level_end\" & success==\"1\") |&gt; \n  group_by(level) |&gt;count(level)\n\ncolnames(levelsuccesscountbyuser)[2]=\"success\"\nmerged_data &lt;- merge(leveltrialcountbyuser, levelsuccesscountbyuser, by = \"level\", all = TRUE)\n\nmerged_data$success &lt;- ifelse(is.na(merged_data$success), 0, merged_data$success)\n\nhead(merged_data)\n\n  level    n success\n1     1 5213       0\n2     2  127     117\n3     3  189     109\n4     4  219     100\n5     5  268      93\n6     6  354      81\n\nmerged_data[,\"success_rate\"]&lt;- merged_data$success/merged_data$n\n\nmerged_data$level=merged_data$level-1\n\nggplot(merged_data[merged_data$level&lt;10 &merged_data$level!=0 ,], aes(x = level, y = success_rate)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\", width = 0.7) +\n  labs(x = \"Level\", y = \"Success Rate\", title = \"Funnel Plot of Success Rate by Level\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = df$level)\n\n\n\n\nTo understand the success rates of users between levels, we calculated the success rates of the levels. In our dataset, success column indicates 1 when users are successful in the level 1 and 0 when unsuccessful. We calculated the success rate by dividing the success rate to total number of attempts. As expected level 1 seems to be the easier level to pass."
  },
  {
    "objectID": "index2.html",
    "href": "index2.html",
    "title": "Archery Game Data Preparation",
    "section": "",
    "text": "Disclaimer\nThis notebook is the first example of a Firebase Analytics data being flattened in R Programming Language, and solutions might not be the most optimal ones.\n\n\n\n\nPreparing JSONL(L stands for new line delimited) data to be in tabular, can sometimes be a journey,\nEspecially when you are dealing with Firebase Analytics Data,\nWhat is Firebase ? It’s the most widely used data tracking software used for mobile applications. Below is how Firebase analytics data look like when it’s partially cleaned:\n\nEach row is an event, all events have a time stamp, all events have some other extra information like country , version etc, but more importantly there is a key, and values, where values can be int, float, or string. But not two different at the same time for a given single key.\nThe above is a summary of a generic, mostly clean Firebase analytics data, the picture is from Google Cloud Bigquery\n\nTrick 1\nYou can use the “here” function from , guess the name “here” package in R to set working directory to your script’s location, so people who use your code don’t have to change any lines to test it out\n\n setwd(here::here()) \n\nYou can now check if the here::here() have worked\n\n getwd()\n\n[1] \"C:/Users/Alta/OneDrive/Desktop/archery_game/archery_game\"\n\n\nAs we previously have shown you, our data is in json format, lets load it and check the head of the data to see how it looks\n\nlibrary(jsonlite) ## no error messages here thanks to the #| warning: false option!\nlibrary(tidyverse)\njsonl_data &lt;- stream_in(file(\"data.json\"),verbose = FALSE)\nhead(jsonl_data,2)\n\n  event_date  event_timestamp  event_name\n1   20231221 1703146325195000  app_remove\n2   20231221 1703134161235001 screen_view\n                                                                                                                                                                                                                             event_params\n1                                                                                                                                               ga_session_id, ga_session_number, firebase_event_origin, 1702888810, 10, NA, NA, NA, auto\n2 entrances, ga_session_number, ga_session_id, firebase_screen_id, firebase_event_origin, engaged_session_event, firebase_screen_class, 1, 52, 1703134160, -8779596609919170096, NA, 1, NA, NA, NA, NA, NA, auto, NA, UnityPlayerActivity\n  event_bundle_sequence_id event_server_timestamp_offset\n1                       15                 1383899326014\n2                      100                           494\n                    user_pseudo_id privacy_info.analytics_storage\n1 eae0e04fa3fa69ef646baaeaa716ea6b                            Yes\n2 74b842a52de12e4cf74034f998ee98cf                            Yes\n  privacy_info.ads_storage privacy_info.uses_transient_token\n1                      Yes                                No\n2                      Yes                                No\n                                                                                                                         user_properties\n1 ga_session_id, ga_session_number, first_open_time, 1702888810, 10, 1701284400000, 1702888810463000, 1702888810463000, 1701284050034000\n2 ga_session_number, ga_session_id, first_open_time, 52, 1703134160, 1698397200000, 1703134160741000, 1703134160741000, 1698396193166000\n  user_first_touch_timestamp device.category device.mobile_brand_name\n1           1701284050034000          mobile                  Samsung\n2           1698396193166000          mobile                  Samsung\n  device.mobile_model_name device.mobile_marketing_name\n1                 SM-G7102               Galaxy Grand 2\n2                 SM-J110H                    Galaxy J1\n  device.mobile_os_hardware_model device.operating_system\n1                        SM-G7102                 Android\n2                        SM-J110H                 Android\n  device.operating_system_version                device.advertising_id\n1                   Android 4.4.2 f28a3de1-340f-4d84-a491-ae5bc5c66a8a\n2                   Android 4.4.4 6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\n  device.language device.is_limited_ad_tracking device.time_zone_offset_seconds\n1           ar-ae                           Yes                            7200\n2           ar-ae                           Yes                            7200\n        geo.city geo.country geo.continent                 geo.region\n1 Kafr el-Sheikh       Egypt        Africa Kafr El-Sheikh Governorate\n2                     Jordan          Asia          Amman Governorate\n  geo.sub_continent geo.metro        app_info.id app_info.version\n1   Northern Africa (not set) com.elakerem.focus           2.0.22\n2      Western Asia (not set) com.elakerem.focus           2.0.22\n                     app_info.firebase_app_id app_info.install_source\n1 1:2474473662:android:5047021a790dce42eb06ef     com.android.vending\n2 1:2474473662:android:5047021a790dce42eb06ef     com.android.vending\n  traffic_source.name traffic_source.medium traffic_source.source  stream_id\n1            (direct)                (none)              (direct) 2758285888\n2            (direct)                (none)              (direct) 2758285888\n  platform items is_active_user event_previous_timestamp\n1  ANDROID  NULL          FALSE                     &lt;NA&gt;\n2  ANDROID  NULL           TRUE         1703035993871001\n  collected_traffic_source.manual_source collected_traffic_source.manual_medium\n1                                   &lt;NA&gt;                                   &lt;NA&gt;\n2                                   &lt;NA&gt;                                   &lt;NA&gt;\n\n\nOverall, it is very uninterpretable , because we have key value formats, data frame of data frames, list of data frames, and all sorts of weird things , Let’s also without going into next levels through use of max.level=1 argument check out the data again\n\nstr(jsonl_data,max.level = 1)\n\n'data.frame':   24762 obs. of  20 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_params                 :List of 24762\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ privacy_info                 :'data.frame':  24762 obs. of  3 variables:\n $ user_properties              :List of 24762\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ device                       :'data.frame':  24762 obs. of  11 variables:\n $ geo                          :'data.frame':  24762 obs. of  6 variables:\n $ app_info                     :'data.frame':  24762 obs. of  4 variables:\n $ traffic_source               :'data.frame':  24762 obs. of  3 variables:\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ items                        :List of 24762\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ collected_traffic_source     :'data.frame':  24762 obs. of  2 variables:\n\n\nSo we have some Lists, some data frames, some characters, and some logical ones , we got a beautiful soup ,\nrecall, the event_params column from the example picture\n\nevent_params has key and value nestings, and value has string, float , int double value nestings, and these are all in different formats, lets take a look at event_params with str function\n\nstr(jsonl_data$event_params,list.len=3)\n\nList of 24762\n $ :'data.frame':   3 obs. of  2 variables:\n  ..$ key  : chr [1:3] \"ga_session_id\" \"ga_session_number\" \"firebase_event_origin\"\n  ..$ value:'data.frame':   3 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:3] \"1702888810\" \"10\" NA\n  .. ..$ string_value: chr [1:3] NA NA \"auto\"\n $ :'data.frame':   7 obs. of  2 variables:\n  ..$ key  : chr [1:7] \"entrances\" \"ga_session_number\" \"ga_session_id\" \"firebase_screen_id\" ...\n  ..$ value:'data.frame':   7 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:7] \"1\" \"52\" \"1703134160\" \"-8779596609919170096\" ...\n  .. ..$ string_value: chr [1:7] NA NA NA NA ...\n $ :'data.frame':   9 obs. of  2 variables:\n  ..$ key  : chr [1:9] \"ga_session_number\" \"level\" \"firebase_screen_id\" \"firebase_event_origin\" ...\n  ..$ value:'data.frame':   9 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:9] \"52\" \"1\" \"-8779596609919170096\" NA ...\n  .. ..$ string_value: chr [1:9] NA NA NA \"app\" ...\n  [list output truncated]\n\n\nWe have a complicated format, here is a demonstration of how to access event_params and its sub parts\n\nclass(jsonl_data) ## Whole data class \n\n[1] \"data.frame\"\n\nclass(jsonl_data$event_params) ## Event params class \n\n[1] \"list\"\n\njsonl_data$event_params[[1]] ## access first row's event_params\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\nclass(jsonl_data$event_params[[1]]) ## it's class \n\n[1] \"data.frame\"\n\njsonl_data$event_params[[1]][1] ## how to access event_params$key\n\n                    key\n1         ga_session_id\n2     ga_session_number\n3 firebase_event_origin\n\nclass(jsonl_data$event_params[[1]][1]) ## it's class\n\n[1] \"data.frame\"\n\njsonl_data$event_params[[1]][2] ## how to access event_params$value\n\n  value.int_value value.string_value\n1      1702888810               &lt;NA&gt;\n2              10               &lt;NA&gt;\n3            &lt;NA&gt;               auto\n\nclass(jsonl_data$event_params[[1]][2]) ## it's class\n\n[1] \"data.frame\"\n\n\nWe have a data frame jsonl_data, it has a list event_params, list is made of data frames, and in the data frame we have key column ,and a data frame named value, which has two columns, named int_value and string_value.\n\nHere is the issue, our data also has inconsistencies bellow take a look at two different “dataframes” under the event_params\n\njsonl_data$event_params[[4983]]\n\n                    key string_value\n1   previous_os_version           11\n2 firebase_event_origin         auto\n\njsonl_data$event_params[[1]]\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\n\nLets begin cleaning , firstly there were some non data frame, lists objects inside the event_params, we will iterate over the event_params, and convert them.\n\nlist_of_dfs=list()\nfor(i in 1:nrow(jsonl_data)){\n  temp_df= as.data.frame(jsonl_data$event_params[[i]])\n  list_of_dfs[[i]] &lt;- temp_df\n}\nclass(list_of_dfs)\n\n[1] \"list\"\n\nlist_of_dfs[[1]]\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\n\nin the next step re call we had int value, and string value for each key, with one of these two always being null.\nSince one of them is always null , we can concoctate them by binding columns , but we got two type of objects inside the event_params( was 3 before the above loop ), the case when there is\nevent_params with key, and value with value having 2 more sub columns and the case with even_params having no nested value column but instead a “string_value” column\nWe can iterate over it in a for loop , for these 2 specific cases fix, bind the columns and unnest it out of the value and have a single value column, and when there is only key with string_value, we can just rename the column\n\nFor fun we will use try catch because why not learn it while working in R ,Example usage of try catch\nTry\nTo Do Something\nExcept ## D0f fail\nDo something else instead\n\n\nfor (i in seq_along(list_of_dfs)) {\n  #print(i)\n  tryCatch({\n    if (\"value\" %in% names(list_of_dfs[[i]])) {\n      if (is.list(list_of_dfs[[i]]$value)) {\n        list_of_dfs[[i]]$value &lt;- ifelse(\n          !is.na(list_of_dfs[[i]]$value$int_value),\n          as.character(list_of_dfs[[i]]$value$int_value),\n          as.character(list_of_dfs[[i]]$value$string_value)\n        )\n        list_of_dfs[[i]]$value &lt;- as.character(list_of_dfs[[i]]$value)\n        list_of_dfs[[i]] &lt;- list_of_dfs[[i]][, !(names(list_of_dfs[[i]]) %in% c(\"int_value\", \"string_value\"))]\n      }\n    }\n  }, error = function(e) {\n    # If an error occurs, rename the second column to \"value\"\n    if (length(names(list_of_dfs[[i]])) &gt;= 2) {\n      #list_of_dfs[[4983]]=\"cancer\"\n      #print(i)\n      #print(list_of_dfs[[i]])\n      #print(i)\n      new_temp_df= cbind.data.frame(list_of_dfs[[i]][[1]],c(list_of_dfs[[i]][[2]]))\n      names(new_temp_df) &lt;- c(\"key\",\"value\")\n      list_of_dfs[[i]]&lt;&lt;- new_temp_df\n      #print(list_of_dfs[[i]])\n    }\n  })\n}\n\nlist_of_dfs[[1]]\n\n                    key      value\n1         ga_session_id 1702888810\n2     ga_session_number         10\n3 firebase_event_origin       auto\n\n\nNote that try catch and error handling is usually much slower than using if statements and should primarily be used for cases that can’t be predicted or handled with regular methods. but it can also be faster when used in place of an extremely complex if check.\nI the next step we flatten the event_params,\nInstead of having key and values, what if every unique key was a data set column , and values were under it, and if in that respective row, there is no element for a specific key we can just keep null, this would make it easier for anyone else working in this data in future.\n\nLuckily, Tidyverse ensures we don’t have to write a complex loop here since we have dealt with the inconsistencies in our data but first lets get these thing out of list of data frames into a single DF, we will use bind_rows function again from tidyverse\n\ncombined_df &lt;- bind_rows(list_of_dfs, .id = \"df_id\")\nhead(combined_df) \n\n  df_id                   key      value\n1     1         ga_session_id 1702888810\n2     1     ga_session_number         10\n3     1 firebase_event_origin       auto\n4     2             entrances          1\n5     2     ga_session_number         52\n6     2         ga_session_id 1703134160\n\n\nNow all we got to do is change the binded element from long to wide format for each ID, pivot_wider will automatically fill it with nulls for cases when in that row a specific key is not used.\n\nflattened_df &lt;- combined_df %&gt;%\n  pivot_wider(names_from = key, values_from = value)\n\nflattened_df &lt;- flattened_df[, -1]\n\nhead(flattened_df )\n\n# A tibble: 6 × 24\n  ga_session_id ga_session_number firebase_event_origin entrances\n  &lt;chr&gt;         &lt;chr&gt;             &lt;chr&gt;                 &lt;chr&gt;    \n1 1702888810    10                auto                  &lt;NA&gt;     \n2 1703134160    52                auto                  1        \n3 1703134160    52                app                   &lt;NA&gt;     \n4 1703134160    52                auto                  &lt;NA&gt;     \n5 1703190214    53                auto                  1        \n6 1703190214    53                app                   &lt;NA&gt;     \n# ℹ 20 more variables: firebase_screen_id &lt;chr&gt;, engaged_session_event &lt;chr&gt;,\n#   firebase_screen_class &lt;chr&gt;, level &lt;chr&gt;, success &lt;chr&gt;, value &lt;chr&gt;,\n#   engagement_time_msec &lt;chr&gt;, session_engaged &lt;chr&gt;,\n#   firebase_previous_class &lt;chr&gt;, firebase_previous_id &lt;chr&gt;,\n#   update_with_analytics &lt;chr&gt;, system_app &lt;chr&gt;,\n#   previous_first_open_count &lt;chr&gt;, system_app_update &lt;chr&gt;,\n#   firebase_conversion &lt;chr&gt;, source &lt;chr&gt;, medium &lt;chr&gt;, …\n\n\nWe can now cbind this into our main dataframe, and also drop some other irrelevant columns and the column we have just flattened\n\nfinal_df= cbind.data.frame(jsonl_data,flattened_df)\nfinal_df2= final_df |&gt; select(-event_params,-user_properties,-items) \n\nLet’s take a look at our data again\n\nstr(final_df2)\n\n'data.frame':   24762 obs. of  41 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ privacy_info                 :'data.frame':  24762 obs. of  3 variables:\n  ..$ analytics_storage   : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ ads_storage         : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ uses_transient_token: chr  \"No\" \"No\" \"No\" \"No\" ...\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ device                       :'data.frame':  24762 obs. of  11 variables:\n  ..$ category                : chr  \"mobile\" \"mobile\" \"mobile\" \"mobile\" ...\n  ..$ mobile_brand_name       : chr  \"Samsung\" \"Samsung\" \"Samsung\" \"Samsung\" ...\n  ..$ mobile_model_name       : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n  ..$ mobile_marketing_name   : chr  \"Galaxy Grand 2\" \"Galaxy J1\" \"Galaxy J1\" \"Galaxy J1\" ...\n  ..$ mobile_os_hardware_model: chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n  ..$ operating_system        : chr  \"Android\" \"Android\" \"Android\" \"Android\" ...\n  ..$ operating_system_version: chr  \"Android 4.4.2\" \"Android 4.4.4\" \"Android 4.4.4\" \"Android 4.4.4\" ...\n  ..$ advertising_id          : chr  \"f28a3de1-340f-4d84-a491-ae5bc5c66a8a\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" ...\n  ..$ language                : chr  \"ar-ae\" \"ar-ae\" \"ar-ae\" \"ar-ae\" ...\n  ..$ is_limited_ad_tracking  : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ time_zone_offset_seconds: chr  \"7200\" \"7200\" \"7200\" \"7200\" ...\n $ geo                          :'data.frame':  24762 obs. of  6 variables:\n  ..$ city         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n  ..$ country      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n  ..$ continent    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n  ..$ region       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n  ..$ sub_continent: chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n  ..$ metro        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n $ app_info                     :'data.frame':  24762 obs. of  4 variables:\n  ..$ id             : chr  \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" ...\n  ..$ version        : chr  \"2.0.22\" \"2.0.22\" \"2.0.22\" \"2.0.22\" ...\n  ..$ firebase_app_id: chr  \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" ...\n  ..$ install_source : chr  \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" ...\n $ traffic_source               :'data.frame':  24762 obs. of  3 variables:\n  ..$ name  : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n  ..$ medium: chr  \"(none)\" \"(none)\" \"(none)\" \"(none)\" ...\n  ..$ source: chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ collected_traffic_source     :'data.frame':  24762 obs. of  2 variables:\n  ..$ manual_source: chr  NA NA NA NA ...\n  ..$ manual_medium: chr  NA NA NA NA ...\n $ ga_session_id                : chr  \"1702888810\" \"1703134160\" \"1703134160\" \"1703134160\" ...\n $ ga_session_number            : chr  \"10\" \"52\" \"52\" \"52\" ...\n $ firebase_event_origin        : chr  \"auto\" \"auto\" \"app\" \"auto\" ...\n $ entrances                    : chr  NA \"1\" NA NA ...\n $ firebase_screen_id           : chr  NA \"-8779596609919170096\" \"-8779596609919170096\" \"-8779596609919170096\" ...\n $ engaged_session_event        : chr  NA \"1\" \"1\" \"1\" ...\n $ firebase_screen_class        : chr  NA \"UnityPlayerActivity\" \"UnityPlayerActivity\" \"UnityPlayerActivity\" ...\n $ level                        : chr  NA NA \"1\" NA ...\n $ success                      : chr  NA NA \"0\" NA ...\n $ value                        : chr  NA NA \"0\" NA ...\n $ engagement_time_msec         : chr  NA NA NA \"114189\" ...\n $ session_engaged              : chr  NA NA NA NA ...\n $ firebase_previous_class      : chr  NA NA NA NA ...\n $ firebase_previous_id         : chr  NA NA NA NA ...\n $ update_with_analytics        : chr  NA NA NA NA ...\n $ system_app                   : chr  NA NA NA NA ...\n $ previous_first_open_count    : chr  NA NA NA NA ...\n $ system_app_update            : chr  NA NA NA NA ...\n $ firebase_conversion          : chr  NA NA NA NA ...\n $ source                       : chr  NA NA NA NA ...\n $ medium                       : chr  NA NA NA NA ...\n $ campaign_info_source         : chr  NA NA NA NA ...\n $ previous_os_version          : chr  NA NA NA NA ...\n $ appnava_churn_prob           : chr  NA NA NA NA ...\n\n\nOur data is now free of the chaos of event_params\nWe however still have few more things to do as we got some columns nested, example, geo column has other columns under it like geo.country, geo.continent and so on, and this might make future work slower,\n\nstr(final_df2$geo)\n\n'data.frame':   24762 obs. of  6 variables:\n $ city         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n $ country      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n $ continent    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n $ region       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n $ sub_continent: chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n $ metro        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n\n\nTo ensure our data is friendly for anyone, we can write a small function that detect such “dataframes under our dataframe” and unnest them\n\nis_dataframe &lt;- function(column) {\n  is.data.frame(column)\n}\n### object to save columns which are dataframes\ndataframe_cols &lt;- c()\n\n# Loop through each column in final_df2\nfor (col in colnames(final_df2)) {\n  if (is_dataframe(final_df2[[col]])) {\n    dataframe_cols &lt;- c(dataframe_cols, col)\n  }\n}\n\n## loop through them, take the column under column to outside of it  and combined them\n\ncombined_nested_dfs=rep(0,nrow(final_df2))\n\nfor (element in dataframe_cols){\n  temp_index=as.character(element)\n  temp_df= final_df2[[temp_index]]\n  combined_nested_dfs=cbind.data.frame(combined_nested_dfs,temp_df)\n}\nfinal_df2=final_df2 |&gt; select(-dataframe_cols)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(dataframe_cols)\n\n  # Now:\n  data %&gt;% select(all_of(dataframe_cols))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nfinal_df3=cbind.data.frame(final_df2,combined_nested_dfs)\n\noptions(scipen=999)\nwrite.csv(final_df3,\"plsfkinwork3.csv\")\n\nWe have written lots of code to have an “end scientist” friendly rectangular dataset final look before we end the dataprep\n\nstr(final_df3)\n\n'data.frame':   24762 obs. of  65 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ ga_session_id                : chr  \"1702888810\" \"1703134160\" \"1703134160\" \"1703134160\" ...\n $ ga_session_number            : chr  \"10\" \"52\" \"52\" \"52\" ...\n $ firebase_event_origin        : chr  \"auto\" \"auto\" \"app\" \"auto\" ...\n $ entrances                    : chr  NA \"1\" NA NA ...\n $ firebase_screen_id           : chr  NA \"-8779596609919170096\" \"-8779596609919170096\" \"-8779596609919170096\" ...\n $ engaged_session_event        : chr  NA \"1\" \"1\" \"1\" ...\n $ firebase_screen_class        : chr  NA \"UnityPlayerActivity\" \"UnityPlayerActivity\" \"UnityPlayerActivity\" ...\n $ level                        : chr  NA NA \"1\" NA ...\n $ success                      : chr  NA NA \"0\" NA ...\n $ value                        : chr  NA NA \"0\" NA ...\n $ engagement_time_msec         : chr  NA NA NA \"114189\" ...\n $ session_engaged              : chr  NA NA NA NA ...\n $ firebase_previous_class      : chr  NA NA NA NA ...\n $ firebase_previous_id         : chr  NA NA NA NA ...\n $ update_with_analytics        : chr  NA NA NA NA ...\n $ system_app                   : chr  NA NA NA NA ...\n $ previous_first_open_count    : chr  NA NA NA NA ...\n $ system_app_update            : chr  NA NA NA NA ...\n $ firebase_conversion          : chr  NA NA NA NA ...\n $ source                       : chr  NA NA NA NA ...\n $ medium                       : chr  NA NA NA NA ...\n $ campaign_info_source         : chr  NA NA NA NA ...\n $ previous_os_version          : chr  NA NA NA NA ...\n $ appnava_churn_prob           : chr  NA NA NA NA ...\n $ combined_nested_dfs          : num  0 0 0 0 0 0 0 0 0 0 ...\n $ analytics_storage            : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ ads_storage                  : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ uses_transient_token         : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ category                     : chr  \"mobile\" \"mobile\" \"mobile\" \"mobile\" ...\n $ mobile_brand_name            : chr  \"Samsung\" \"Samsung\" \"Samsung\" \"Samsung\" ...\n $ mobile_model_name            : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n $ mobile_marketing_name        : chr  \"Galaxy Grand 2\" \"Galaxy J1\" \"Galaxy J1\" \"Galaxy J1\" ...\n $ mobile_os_hardware_model     : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n $ operating_system             : chr  \"Android\" \"Android\" \"Android\" \"Android\" ...\n $ operating_system_version     : chr  \"Android 4.4.2\" \"Android 4.4.4\" \"Android 4.4.4\" \"Android 4.4.4\" ...\n $ advertising_id               : chr  \"f28a3de1-340f-4d84-a491-ae5bc5c66a8a\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" ...\n $ language                     : chr  \"ar-ae\" \"ar-ae\" \"ar-ae\" \"ar-ae\" ...\n $ is_limited_ad_tracking       : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ time_zone_offset_seconds     : chr  \"7200\" \"7200\" \"7200\" \"7200\" ...\n $ city                         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n $ country                      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n $ continent                    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n $ region                       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n $ sub_continent                : chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n $ metro                        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n $ id                           : chr  \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" ...\n $ version                      : chr  \"2.0.22\" \"2.0.22\" \"2.0.22\" \"2.0.22\" ...\n $ firebase_app_id              : chr  \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" ...\n $ install_source               : chr  \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" ...\n $ name                         : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ medium                       : chr  \"(none)\" \"(none)\" \"(none)\" \"(none)\" ...\n $ source                       : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ manual_source                : chr  NA NA NA NA ...\n $ manual_medium                : chr  NA NA NA NA ...\n\n\nLets save the results before we begin our data analysis.\n\nwrite.csv(final_df3,\"plsfkinwork3.csv\")"
  },
  {
    "objectID": "Y.html",
    "href": "Y.html",
    "title": "Game Archery Quarto",
    "section": "",
    "text": "The data that has been used in this study in gathered from a mobile game that can be played on an Android operating system.\nThe data has a total of 24762 observations and 66 variables. In the game there is a spinning ball in the middle and the player throws arrows to the spinning ball by touching the screen, if the arrows hit on another but not the spinning ball, the player has to repeat the level.\nThere are 200 levels and each level gets more difficult gradually.The importance of the Datasets is, they have been collected detailed and the sample size is enough to make interpretation. Also the sample size is not too large to cause any kind of problems, therefore no subsample has been taken. The original dataset is in json format and has to be cleaned, the variable names have to be adjusted and the types of the columns should be corrected.\nIf you haven’t seen a json data yet, this is how it looks like :\n\nSo as you can see, the data is very hard to understand and analyse.\nSo we had to change the format to a csv.\n\nNow it looks better :)\nThe game has been available to users for a while (2012). A lot of data was collected during this time. From which country the users are in to which phone they use.\nThere are also interesting things. There are even information about how much time players spent on each level, their success rates in the levels, and the android version they used.\nBased on what we know, we wondered about some things and wanted to visualize them and share the results we found with you.\nA few things we will cover up :\nResearch Question 1:\n\nHow does the distribution of players vary across continents in a mobile game, and are there noticeable patterns or disparities in user engagement based on continent?”\n\nResearch Question 2:\n\nWhat is the distribution of the maximum level attained by users in a mobile game, analyzed in conjunction with their respective continents and mobile brands?\nAre there significant variations in the maximum level achieved, and do these patterns differ across continents and mobile brands?”\n\nResearch Question 3:\n\nHow does user engagement differ across mobile device categories, specifically ‘mobile’ and ‘phone,’ in a mobile game? Furthermore, are there variations in the maximum levels achieved by users within each category?\nThis analysis seeks to uncover patterns and disparities in user behavior based on the distinction between mobile and phone categories.”\n\nResearch Question 4:\n\nHow is the distribution of success rates shaped in the game?\n\nResearch Question 5:\n\nWhat is the distribution of successful trial frequencies at different levels within a mobile game?\n\nThe answers and visualizations to these questions will give us a better understanding of the game.\n\nThis is a photo of the 43th level. The screenshot is from my phone, I got to the 43th level in around 45 minutes, so you can see that the game isn’t that hard."
  },
  {
    "objectID": "index3_mert.html",
    "href": "index3_mert.html",
    "title": "Archery Game Analysis",
    "section": "",
    "text": "setwd(here::here())\n df=read.csv(\"plsfkinwork3.csv\")\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(jsonlite)\nlibrary(tidyr)\n\noptions(scipen=999)\ndf=df[,-1]\n#colnames(df)\n\ndf$engagement_time_msec=as.numeric(df$engagement_time_msec)\n\n\ntotal_session_duration_per_user &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarize(total_engagement_time = sum(engagement_time_msec,na.rm = TRUE))\n\ntotal_session_duration_per_user$total_engagement_time=total_session_duration_per_user$total_engagement_time/60000\n\nhist(total_session_duration_per_user$total_engagement_time,breaks=50)\n\n\n\nbreaks &lt;- c(0, 1, 2, 3, 5, 10, 20, 60, 1320)\n\n# Create a factor variable with specified breaks\ntotal_session_duration_per_user$break_group &lt;- cut(total_session_duration_per_user$total_engagement_time, breaks = breaks, labels = FALSE, include.lowest = TRUE)\ncustom_labels &lt;- c(\"0-1\", \"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-20\", \"20-60\", \"60-1320\", \"1320+\")\n# Create a histogram using ggplot2\nggplot(total_session_duration_per_user, aes(x = factor(break_group))) +\n  geom_bar(fill = \"blue\", color = \"black\", alpha = 0.7) +\n  scale_x_discrete(breaks = seq_along(breaks) - 1, labels = custom_labels) +\n  labs(title = \"Total Session Duration Histogram\",\n       x = \"Total Session Duration (minutes)\",\n       y = \"Frequency\")\n\n\n\ndistinct_sessions_per_user &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarize(distinct_session_count = n_distinct(ga_session_id))\n#df$user_first_touch_timestamp\n\nggplot(distinct_sessions_per_user, aes(x = distinct_session_count)) +\n  geom_histogram(fill = \"blue\", color = \"black\", alpha = 0.7, bins = 20) +\n  labs(title = \"Distinct Sessions per User Histogram\",\n       x = \"Distinct Session Count\",\n       y = \"Frequency\")\n\n\n\ndf$user_first_touch_timestamp = as.numeric(df$user_first_touch_timestamp)\ndf$event_timestamp = as.numeric(df$event_timestamp)\n\nuser_ages &lt;- df %&gt;%\n  group_by(user_pseudo_id) %&gt;%\n  summarise(time_difference = max(event_timestamp) - max(user_first_touch_timestamp))\n\nuser_ages$time_difference= user_ages$time_difference/60000\n\n\n\n#Event Count Visualization\n\n\nevent_counts &lt;- df %&gt;%\n  count(event_name)\n\n\n# Bar plot with events sorted by count\nggplot(event_counts, aes(x = reorder(event_name, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Event Counts\",\n       x = \"Event Name\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n\n\ndf$mobile_brand_name= as.factor(df$mobile_brand_name)\ndf$continent= as.factor(df$continent)\n\n\n\n#\n#Research Question 1:\n  #\"How does the distribution of players vary across continents in a mobile game, and are there noticeable patterns or disparities in user engagement based on continent?\"\n\n# Select distinct users and their associated continent\ndistinct_users &lt;- df %&gt;%\n  select(user_pseudo_id, continent) %&gt;%\n  distinct()\n\n# Create a bar plot for the distribution of distinct users across continents\nggplot(distinct_users, aes(x = continent)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Distinct Users Across Continents\",\n       x = \"Continent\",\n       y = \"Number of Distinct Users\") +\n  theme_minimal()\n\n\n\n#Bubble Chart of Distinct Users by Country\n\nusers_per_country &lt;- df %&gt;%\n  group_by(continent, country) %&gt;%\n  summarise(distinct_user_count = n_distinct(user_pseudo_id))\n\n# Filter countries with distinct user count &gt; 1\nusers_per_country_filtered &lt;- users_per_country %&gt;%\n  filter(distinct_user_count &gt; 1)\n\n# Reorder countries based on distinct user count\nusers_per_country_filtered &lt;- users_per_country_filtered %&gt;%\n  arrange(desc(distinct_user_count)) %&gt;%\n  mutate(country_display = ifelse(country == \"T&lt;U+00FC&gt;rkiye\", \"Turkey\", country))\n\nggplot(users_per_country_filtered, aes(x = reorder(country_display, distinct_user_count), y = distinct_user_count, size = distinct_user_count, color = continent)) +\n  geom_point() +\n  scale_size_continuous(name = \"Distinct User Count\", range = c(5, 17)) +\n  labs(title = \"Bubble Chart of Distinct Users by Country\",\n       x = \"Country\",\n       y = \"Distinct User Count\",\n       color = \"Continent\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n#Research Question 2:\n# \"What is the distribution of the maximum level attained by users in a mobile game, analyzed in conjunction with their respective continents and mobile brands? Are there significant variations in the maximum level achieved, and do these patterns differ across continents and mobile brands?\"\n\n\n\n\n#max level of the users grouped distribution by continent\n\nmax_level_data &lt;- df %&gt;%\n  group_by(user_pseudo_id, continent) %&gt;%\n  summarize(max_level = max(level, na.rm = TRUE))\n\n# Create a box plot\nggplot(max_level_data, aes(x = continent, y = max_level)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Maximum Level by Continent and Mobile Brand\",\n       x = \"Continent\",\n       y = \"Max Level\",\n       fill = \"Mobile Brand\") +\n  theme_minimal()\n\n\n\n#Research Question 3:\n #\"How does user engagement differ across mobile device categories, specifically 'mobile' and 'phone,' in a mobile game? Furthermore, are there variations in the maximum levels achieved by users within each category?\n #This analysis seeks to uncover patterns and disparities in user behavior based on the distinction between mobile and phone categories.\"\n\n########\n# Select distinct users and their associated category= mobile, phone\ndistinct_users_category &lt;- df %&gt;%\n  select(user_pseudo_id, category) %&gt;%\n  distinct()\n\n\nggplot(distinct_users_category, aes(x = category)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Distinct Users Across Continents\",\n       x = \"Continent\",\n       y = \"Number of Distinct Users\") +\n  theme_minimal()\n\n\n\n#max level of the users grouped distribution by category\n\nmax_level_data_category &lt;- df %&gt;%\n  group_by(user_pseudo_id, category) %&gt;%\n  summarize(max_level = max(level, na.rm = TRUE))\n\n# Create a box plot\nggplot(max_level_data_category, aes(x = category, y = max_level)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Maximum Level by Continent and Mobile Brand\",\n       x = \"Continent\",\n       y = \"Max Level\",\n       fill = \"Mobile Brand\") +\n  theme_minimal()\n\n\n\n#event\n\n#################################\n\nleveltrialcountbyuser =df |&gt; filter(event_name==\"level_end\") |&gt; \n  group_by(user_pseudo_id,level,success) |&gt; count(level)\n\n# Summarize the data to calculate the success/trial rate for each level\nleveltrialrate &lt;- leveltrialcountbyuser %&gt;%\n  group_by(level) %&gt;%\n  summarise(success_rate = sum(success) / sum(n))\n\n#leveltrialrate\n\nresult &lt;- left_join(leveltrialcountbyuser, leveltrialrate, by = \"level\")\nresult\n\n# A tibble: 4,445 × 5\n# Groups:   user_pseudo_id, level, success [4,445]\n   user_pseudo_id                   level success     n success_rate\n   &lt;chr&gt;                            &lt;int&gt;   &lt;int&gt; &lt;int&gt;        &lt;dbl&gt;\n 1 0021a85049e5c4fc2005b058c91188e2     6       0     6        0.226\n 2 0021a85049e5c4fc2005b058c91188e2     6       1     1        0.226\n 3 0021a85049e5c4fc2005b058c91188e2     7       1     1        0.605\n 4 0069544f6dc43cab344d918be6a316ee     1       0     9        0    \n 5 02031002e84e9adf231e37ca24b6ea28     2       1     2        0.898\n 6 02031002e84e9adf231e37ca24b6ea28     3       0     2        0.566\n 7 02031002e84e9adf231e37ca24b6ea28     3       1     2        0.566\n 8 02031002e84e9adf231e37ca24b6ea28     4       0     2        0.447\n 9 02031002e84e9adf231e37ca24b6ea28     4       1     1        0.447\n10 02031002e84e9adf231e37ca24b6ea28     5       0     4        0.340\n# ℹ 4,435 more rows\n\n#Research Question 4:\n #\"How is the distribution of success rates shaped in the game?\"\n\n\n# Create a box plot for the distribution of success rates without level labels\nggplot(result, aes(x = \"\", y = success_rate, fill = as.factor(level))) +\n  geom_boxplot() +\n  labs(title = \"Distribution of Success Rates\",\n       x = \"\",\n       y = \"Success Rate (%)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  guides(fill = FALSE)  # Hide the legend\n\n\n\n#leveltrialcountbyuser_wsuccess =df |&gt; filter(event_name==\"level_end\" & success==1) |&gt; \n#  group_by(user_pseudo_id,level) |&gt; count(level)\n\n\n\n#Research Question 5:\n #\"What is the distribution of successful trial frequencies at different levels within a mobile game?\n #By filtering data for successful attempts and grouping users by level, this analysis aims to unveil patterns in user engagement. The focus is on understanding the frequency of successful trials at each level, shedding light on user behavior and progression dynamics throughout the game.\"\n\n# Filter data for successful attempts\nsuccess_data &lt;- df %&gt;%\n  filter(event_name == \"level_end\" & success == 1)\n\n# Group by user_pseudo_id and level, and count the number of successful attempts\nleveltrialcountbyuser_wsuccess &lt;- success_data %&gt;%\n  group_by(user_pseudo_id, level) %&gt;%\n  summarise(trials = n())\n\n# Add a column for distinct_user_count\nleveltrialcountbyuser_wsuccess &lt;- leveltrialcountbyuser_wsuccess %&gt;%\n  group_by(level) %&gt;%\n  summarise(distinct_user_count = n(), trials = sum(trials))\n\n# Create a bar plot for the frequency of trials at each level\nggplot(leveltrialcountbyuser_wsuccess, aes(x = level, y = distinct_user_count, fill = factor(level))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Frequency of Trials at Each Level\",\n       x = \"Level\",\n       y = \"Frequency\",\n       fill = \"Level\") +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),  \n        legend.position = \"none\")"
  },
  {
    "objectID": "index2.html#disclaimer",
    "href": "index2.html#disclaimer",
    "title": "Archery Game Data Preparation",
    "section": "Disclaimer",
    "text": "Disclaimer\nThis notebook is the first example of a Firebase Analytics data being flattened in R Programming Language, and solutions might not be the most optimal ones.\n:::\nPreparing JSONL(L stands for new line delimited) data to be in tabular, can sometimes be a journey,\nEspecially when you are dealing with Firebase Analytics Data,\nWhat is Firebase ? It’s the most widely used data tracking software used for mobile applications. Below is how Firebase analytics data look like when it’s partially cleaned:\n\nEach row is an event, all events have a time stamp, all events have some other extra information like country , version etc, but more importantly there is a key, and values, where values can be int, float, or string. But not two different at the same time for a given single key.\nThe above is a summary of a generic, mostly clean Firebase analytics data, the picture is from Google Cloud Bigquery\n\nTrick 1\nYou can use the “here” function from , guess the name “here” package in R to set working directory to your script’s location, so people who use your code don’t have to change any lines to test it out\n\n setwd(here::here()) \n\nYou can now check if the here::here() have worked\n\n getwd()\n\n[1] \"C:/Users/Alta/OneDrive/Desktop/archery_game/archery_game\"\n\n\nAs we previously have shown you, our data is in json format, lets load it and check the head of the data to see how it looks\n\nlibrary(jsonlite) ## no error messages here thanks to the #| warning: false option!\nlibrary(tidyverse)\njsonl_data &lt;- stream_in(file(\"data.json\"),verbose = FALSE)\nhead(jsonl_data,2)\n\n  event_date  event_timestamp  event_name\n1   20231221 1703146325195000  app_remove\n2   20231221 1703134161235001 screen_view\n                                                                                                                                                                                                                             event_params\n1                                                                                                                                               ga_session_id, ga_session_number, firebase_event_origin, 1702888810, 10, NA, NA, NA, auto\n2 entrances, ga_session_number, ga_session_id, firebase_screen_id, firebase_event_origin, engaged_session_event, firebase_screen_class, 1, 52, 1703134160, -8779596609919170096, NA, 1, NA, NA, NA, NA, NA, auto, NA, UnityPlayerActivity\n  event_bundle_sequence_id event_server_timestamp_offset\n1                       15                 1383899326014\n2                      100                           494\n                    user_pseudo_id privacy_info.analytics_storage\n1 eae0e04fa3fa69ef646baaeaa716ea6b                            Yes\n2 74b842a52de12e4cf74034f998ee98cf                            Yes\n  privacy_info.ads_storage privacy_info.uses_transient_token\n1                      Yes                                No\n2                      Yes                                No\n                                                                                                                         user_properties\n1 ga_session_id, ga_session_number, first_open_time, 1702888810, 10, 1701284400000, 1702888810463000, 1702888810463000, 1701284050034000\n2 ga_session_number, ga_session_id, first_open_time, 52, 1703134160, 1698397200000, 1703134160741000, 1703134160741000, 1698396193166000\n  user_first_touch_timestamp device.category device.mobile_brand_name\n1           1701284050034000          mobile                  Samsung\n2           1698396193166000          mobile                  Samsung\n  device.mobile_model_name device.mobile_marketing_name\n1                 SM-G7102               Galaxy Grand 2\n2                 SM-J110H                    Galaxy J1\n  device.mobile_os_hardware_model device.operating_system\n1                        SM-G7102                 Android\n2                        SM-J110H                 Android\n  device.operating_system_version                device.advertising_id\n1                   Android 4.4.2 f28a3de1-340f-4d84-a491-ae5bc5c66a8a\n2                   Android 4.4.4 6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\n  device.language device.is_limited_ad_tracking device.time_zone_offset_seconds\n1           ar-ae                           Yes                            7200\n2           ar-ae                           Yes                            7200\n        geo.city geo.country geo.continent                 geo.region\n1 Kafr el-Sheikh       Egypt        Africa Kafr El-Sheikh Governorate\n2                     Jordan          Asia          Amman Governorate\n  geo.sub_continent geo.metro        app_info.id app_info.version\n1   Northern Africa (not set) com.elakerem.focus           2.0.22\n2      Western Asia (not set) com.elakerem.focus           2.0.22\n                     app_info.firebase_app_id app_info.install_source\n1 1:2474473662:android:5047021a790dce42eb06ef     com.android.vending\n2 1:2474473662:android:5047021a790dce42eb06ef     com.android.vending\n  traffic_source.name traffic_source.medium traffic_source.source  stream_id\n1            (direct)                (none)              (direct) 2758285888\n2            (direct)                (none)              (direct) 2758285888\n  platform items is_active_user event_previous_timestamp\n1  ANDROID  NULL          FALSE                     &lt;NA&gt;\n2  ANDROID  NULL           TRUE         1703035993871001\n  collected_traffic_source.manual_source collected_traffic_source.manual_medium\n1                                   &lt;NA&gt;                                   &lt;NA&gt;\n2                                   &lt;NA&gt;                                   &lt;NA&gt;\n\n\nOverall, it is very uninterpretable , because we have key value formats, data frame of data frames, list of data frames, and all sorts of weird things , Let’s also without going into next levels through use of max.level=1 argument check out the data again\n\nstr(jsonl_data,max.level = 1)\n\n'data.frame':   24762 obs. of  20 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_params                 :List of 24762\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ privacy_info                 :'data.frame':  24762 obs. of  3 variables:\n $ user_properties              :List of 24762\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ device                       :'data.frame':  24762 obs. of  11 variables:\n $ geo                          :'data.frame':  24762 obs. of  6 variables:\n $ app_info                     :'data.frame':  24762 obs. of  4 variables:\n $ traffic_source               :'data.frame':  24762 obs. of  3 variables:\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ items                        :List of 24762\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ collected_traffic_source     :'data.frame':  24762 obs. of  2 variables:\n\n\nSo we have some Lists, some data frames, some characters, and some logical ones , we got a beautiful soup ,\nrecall, the event_params column from the example picture\n\nevent_params has key and value nestings, and value has string, float , int double value nestings, and these are all in different formats, lets take a look at event_params with str function\n\nstr(jsonl_data$event_params,list.len=3)\n\nList of 24762\n $ :'data.frame':   3 obs. of  2 variables:\n  ..$ key  : chr [1:3] \"ga_session_id\" \"ga_session_number\" \"firebase_event_origin\"\n  ..$ value:'data.frame':   3 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:3] \"1702888810\" \"10\" NA\n  .. ..$ string_value: chr [1:3] NA NA \"auto\"\n $ :'data.frame':   7 obs. of  2 variables:\n  ..$ key  : chr [1:7] \"entrances\" \"ga_session_number\" \"ga_session_id\" \"firebase_screen_id\" ...\n  ..$ value:'data.frame':   7 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:7] \"1\" \"52\" \"1703134160\" \"-8779596609919170096\" ...\n  .. ..$ string_value: chr [1:7] NA NA NA NA ...\n $ :'data.frame':   9 obs. of  2 variables:\n  ..$ key  : chr [1:9] \"ga_session_number\" \"level\" \"firebase_screen_id\" \"firebase_event_origin\" ...\n  ..$ value:'data.frame':   9 obs. of  2 variables:\n  .. ..$ int_value   : chr [1:9] \"52\" \"1\" \"-8779596609919170096\" NA ...\n  .. ..$ string_value: chr [1:9] NA NA NA \"app\" ...\n  [list output truncated]\n\n\nWe have a complicated format, here is a demonstration of how to access event_params and its sub parts\n\nclass(jsonl_data) ## Whole data class \n\n[1] \"data.frame\"\n\nclass(jsonl_data$event_params) ## Event params class \n\n[1] \"list\"\n\njsonl_data$event_params[[1]] ## access first row's event_params\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\nclass(jsonl_data$event_params[[1]]) ## it's class \n\n[1] \"data.frame\"\n\njsonl_data$event_params[[1]][1] ## how to access event_params$key\n\n                    key\n1         ga_session_id\n2     ga_session_number\n3 firebase_event_origin\n\nclass(jsonl_data$event_params[[1]][1]) ## it's class\n\n[1] \"data.frame\"\n\njsonl_data$event_params[[1]][2] ## how to access event_params$value\n\n  value.int_value value.string_value\n1      1702888810               &lt;NA&gt;\n2              10               &lt;NA&gt;\n3            &lt;NA&gt;               auto\n\nclass(jsonl_data$event_params[[1]][2]) ## it's class\n\n[1] \"data.frame\"\n\n\nWe have a data frame jsonl_data, it has a list event_params, list is made of data frames, and in the data frame we have key column ,and a data frame named value, which has two columns, named int_value and string_value.\n\nHere is the issue, our data also has inconsistencies bellow take a look at two different “dataframes” under the event_params\n\njsonl_data$event_params[[4983]]\n\n                    key string_value\n1   previous_os_version           11\n2 firebase_event_origin         auto\n\njsonl_data$event_params[[1]]\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\n\nLets begin cleaning , firstly there were some non data frame, lists objects inside the event_params, we will iterate over the event_params, and convert them.\n\nlist_of_dfs=list()\nfor(i in 1:nrow(jsonl_data)){\n  temp_df= as.data.frame(jsonl_data$event_params[[i]])\n  list_of_dfs[[i]] &lt;- temp_df\n}\nclass(list_of_dfs)\n\n[1] \"list\"\n\nlist_of_dfs[[1]]\n\n                    key value.int_value value.string_value\n1         ga_session_id      1702888810               &lt;NA&gt;\n2     ga_session_number              10               &lt;NA&gt;\n3 firebase_event_origin            &lt;NA&gt;               auto\n\n\nin the next step re call we had int value, and string value for each key, with one of these two always being null.\nSince one of them is always null , we can concoctate them by binding columns , but we got two type of objects inside the event_params( was 3 before the above loop ), the case when there is\nevent_params with key, and value with value having 2 more sub columns and the case with even_params having no nested value column but instead a “string_value” column\nWe can iterate over it in a for loop , for these 2 specific cases fix, bind the columns and unnest it out of the value and have a single value column, and when there is only key with string_value, we can just rename the column\n\nFor fun we will use try catch because why not learn it while working in R ,Example usage of try catch\nTry\nTo Do Something\nExcept ## D0f fail\nDo something else instead\n\n\nfor (i in seq_along(list_of_dfs)) {\n  #print(i)\n  tryCatch({\n    if (\"value\" %in% names(list_of_dfs[[i]])) {\n      if (is.list(list_of_dfs[[i]]$value)) {\n        list_of_dfs[[i]]$value &lt;- ifelse(\n          !is.na(list_of_dfs[[i]]$value$int_value),\n          as.character(list_of_dfs[[i]]$value$int_value),\n          as.character(list_of_dfs[[i]]$value$string_value)\n        )\n        list_of_dfs[[i]]$value &lt;- as.character(list_of_dfs[[i]]$value)\n        list_of_dfs[[i]] &lt;- list_of_dfs[[i]][, !(names(list_of_dfs[[i]]) %in% c(\"int_value\", \"string_value\"))]\n      }\n    }\n  }, error = function(e) {\n    # If an error occurs, rename the second column to \"value\"\n    if (length(names(list_of_dfs[[i]])) &gt;= 2) {\n      #list_of_dfs[[4983]]=\"cancer\"\n      #print(i)\n      #print(list_of_dfs[[i]])\n      #print(i)\n      new_temp_df= cbind.data.frame(list_of_dfs[[i]][[1]],c(list_of_dfs[[i]][[2]]))\n      names(new_temp_df) &lt;- c(\"key\",\"value\")\n      list_of_dfs[[i]]&lt;&lt;- new_temp_df\n      #print(list_of_dfs[[i]])\n    }\n  })\n}\n\nlist_of_dfs[[1]]\n\n                    key      value\n1         ga_session_id 1702888810\n2     ga_session_number         10\n3 firebase_event_origin       auto\n\n\nNote that try catch and error handling is usually much slower than using if statements and should primarily be used for cases that can’t be predicted or handled with regular methods. but it can also be faster when used in place of an extremely complex if check.\nI the next step we flatten the event_params,\nInstead of having key and values, what if every unique key was a data set column , and values were under it, and if in that respective row, there is no element for a specific key we can just keep null, this would make it easier for anyone else working in this data in future.\n\nLuckily, Tidyverse ensures we don’t have to write a complex loop here since we have dealt with the inconsistencies in our data but first lets get these thing out of list of data frames into a single DF, we will use bind_rows function again from tidyverse\n\ncombined_df &lt;- bind_rows(list_of_dfs, .id = \"df_id\")\nhead(combined_df) \n\n  df_id                   key      value\n1     1         ga_session_id 1702888810\n2     1     ga_session_number         10\n3     1 firebase_event_origin       auto\n4     2             entrances          1\n5     2     ga_session_number         52\n6     2         ga_session_id 1703134160\n\n\nNow all we got to do is change the binded element from long to wide format for each ID, pivot_wider will automatically fill it with nulls for cases when in that row a specific key is not used.\n\nflattened_df &lt;- combined_df %&gt;%\n  pivot_wider(names_from = key, values_from = value)\n\nflattened_df &lt;- flattened_df[, -1]\n\nhead(flattened_df )\n\n# A tibble: 6 × 24\n  ga_session_id ga_session_number firebase_event_origin entrances\n  &lt;chr&gt;         &lt;chr&gt;             &lt;chr&gt;                 &lt;chr&gt;    \n1 1702888810    10                auto                  &lt;NA&gt;     \n2 1703134160    52                auto                  1        \n3 1703134160    52                app                   &lt;NA&gt;     \n4 1703134160    52                auto                  &lt;NA&gt;     \n5 1703190214    53                auto                  1        \n6 1703190214    53                app                   &lt;NA&gt;     \n# ℹ 20 more variables: firebase_screen_id &lt;chr&gt;, engaged_session_event &lt;chr&gt;,\n#   firebase_screen_class &lt;chr&gt;, level &lt;chr&gt;, success &lt;chr&gt;, value &lt;chr&gt;,\n#   engagement_time_msec &lt;chr&gt;, session_engaged &lt;chr&gt;,\n#   firebase_previous_class &lt;chr&gt;, firebase_previous_id &lt;chr&gt;,\n#   update_with_analytics &lt;chr&gt;, system_app &lt;chr&gt;,\n#   previous_first_open_count &lt;chr&gt;, system_app_update &lt;chr&gt;,\n#   firebase_conversion &lt;chr&gt;, source &lt;chr&gt;, medium &lt;chr&gt;, …\n\n\nWe can now cbind this into our main dataframe, and also drop some other irrelevant columns and the column we have just flattened\n\nfinal_df= cbind.data.frame(jsonl_data,flattened_df)\nfinal_df2= final_df |&gt; select(-event_params,-user_properties,-items) \n\nLet’s take a look at our data again\n\nstr(final_df2)\n\n'data.frame':   24762 obs. of  41 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ privacy_info                 :'data.frame':  24762 obs. of  3 variables:\n  ..$ analytics_storage   : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ ads_storage         : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ uses_transient_token: chr  \"No\" \"No\" \"No\" \"No\" ...\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ device                       :'data.frame':  24762 obs. of  11 variables:\n  ..$ category                : chr  \"mobile\" \"mobile\" \"mobile\" \"mobile\" ...\n  ..$ mobile_brand_name       : chr  \"Samsung\" \"Samsung\" \"Samsung\" \"Samsung\" ...\n  ..$ mobile_model_name       : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n  ..$ mobile_marketing_name   : chr  \"Galaxy Grand 2\" \"Galaxy J1\" \"Galaxy J1\" \"Galaxy J1\" ...\n  ..$ mobile_os_hardware_model: chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n  ..$ operating_system        : chr  \"Android\" \"Android\" \"Android\" \"Android\" ...\n  ..$ operating_system_version: chr  \"Android 4.4.2\" \"Android 4.4.4\" \"Android 4.4.4\" \"Android 4.4.4\" ...\n  ..$ advertising_id          : chr  \"f28a3de1-340f-4d84-a491-ae5bc5c66a8a\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" ...\n  ..$ language                : chr  \"ar-ae\" \"ar-ae\" \"ar-ae\" \"ar-ae\" ...\n  ..$ is_limited_ad_tracking  : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n  ..$ time_zone_offset_seconds: chr  \"7200\" \"7200\" \"7200\" \"7200\" ...\n $ geo                          :'data.frame':  24762 obs. of  6 variables:\n  ..$ city         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n  ..$ country      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n  ..$ continent    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n  ..$ region       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n  ..$ sub_continent: chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n  ..$ metro        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n $ app_info                     :'data.frame':  24762 obs. of  4 variables:\n  ..$ id             : chr  \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" ...\n  ..$ version        : chr  \"2.0.22\" \"2.0.22\" \"2.0.22\" \"2.0.22\" ...\n  ..$ firebase_app_id: chr  \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" ...\n  ..$ install_source : chr  \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" ...\n $ traffic_source               :'data.frame':  24762 obs. of  3 variables:\n  ..$ name  : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n  ..$ medium: chr  \"(none)\" \"(none)\" \"(none)\" \"(none)\" ...\n  ..$ source: chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ collected_traffic_source     :'data.frame':  24762 obs. of  2 variables:\n  ..$ manual_source: chr  NA NA NA NA ...\n  ..$ manual_medium: chr  NA NA NA NA ...\n $ ga_session_id                : chr  \"1702888810\" \"1703134160\" \"1703134160\" \"1703134160\" ...\n $ ga_session_number            : chr  \"10\" \"52\" \"52\" \"52\" ...\n $ firebase_event_origin        : chr  \"auto\" \"auto\" \"app\" \"auto\" ...\n $ entrances                    : chr  NA \"1\" NA NA ...\n $ firebase_screen_id           : chr  NA \"-8779596609919170096\" \"-8779596609919170096\" \"-8779596609919170096\" ...\n $ engaged_session_event        : chr  NA \"1\" \"1\" \"1\" ...\n $ firebase_screen_class        : chr  NA \"UnityPlayerActivity\" \"UnityPlayerActivity\" \"UnityPlayerActivity\" ...\n $ level                        : chr  NA NA \"1\" NA ...\n $ success                      : chr  NA NA \"0\" NA ...\n $ value                        : chr  NA NA \"0\" NA ...\n $ engagement_time_msec         : chr  NA NA NA \"114189\" ...\n $ session_engaged              : chr  NA NA NA NA ...\n $ firebase_previous_class      : chr  NA NA NA NA ...\n $ firebase_previous_id         : chr  NA NA NA NA ...\n $ update_with_analytics        : chr  NA NA NA NA ...\n $ system_app                   : chr  NA NA NA NA ...\n $ previous_first_open_count    : chr  NA NA NA NA ...\n $ system_app_update            : chr  NA NA NA NA ...\n $ firebase_conversion          : chr  NA NA NA NA ...\n $ source                       : chr  NA NA NA NA ...\n $ medium                       : chr  NA NA NA NA ...\n $ campaign_info_source         : chr  NA NA NA NA ...\n $ previous_os_version          : chr  NA NA NA NA ...\n $ appnava_churn_prob           : chr  NA NA NA NA ...\n\n\nOur data is now free of the chaos of event_params\nWe however still have few more things to do as we got some columns nested, example, geo column has other columns under it like geo.country, geo.continent and so on, and this might make future work slower,\n\nstr(final_df2$geo)\n\n'data.frame':   24762 obs. of  6 variables:\n $ city         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n $ country      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n $ continent    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n $ region       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n $ sub_continent: chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n $ metro        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n\n\nTo ensure our data is friendly for anyone, we can write a small function that detect such “dataframes under our dataframe” and unnest them\n\nis_dataframe &lt;- function(column) {\n  is.data.frame(column)\n}\n### object to save columns which are dataframes\ndataframe_cols &lt;- c()\n\n# Loop through each column in final_df2\nfor (col in colnames(final_df2)) {\n  if (is_dataframe(final_df2[[col]])) {\n    dataframe_cols &lt;- c(dataframe_cols, col)\n  }\n}\n\n## loop through them, take the column under column to outside of it  and combined them\n\ncombined_nested_dfs=rep(0,nrow(final_df2))\n\nfor (element in dataframe_cols){\n  temp_index=as.character(element)\n  temp_df= final_df2[[temp_index]]\n  combined_nested_dfs=cbind.data.frame(combined_nested_dfs,temp_df)\n}\nfinal_df2=final_df2 |&gt; select(-dataframe_cols)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(dataframe_cols)\n\n  # Now:\n  data %&gt;% select(all_of(dataframe_cols))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nfinal_df3=cbind.data.frame(final_df2,combined_nested_dfs)\n\noptions(scipen=999)\nwrite.csv(final_df3,\"plsfkinwork3.csv\")\n\nWe have written lots of code to have an “end scientist” friendly rectangular dataset final look before we end the dataprep\n\nstr(final_df3)\n\n'data.frame':   24762 obs. of  65 variables:\n $ event_date                   : chr  \"20231221\" \"20231221\" \"20231221\" \"20231221\" ...\n $ event_timestamp              : chr  \"1703146325195000\" \"1703134161235001\" \"1703134235541004\" \"1703134279049008\" ...\n $ event_name                   : chr  \"app_remove\" \"screen_view\" \"level_end\" \"user_engagement\" ...\n $ event_bundle_sequence_id     : chr  \"15\" \"100\" \"100\" \"100\" ...\n $ event_server_timestamp_offset: chr  \"1383899326014\" \"494\" \"494\" \"494\" ...\n $ user_pseudo_id               : chr  \"eae0e04fa3fa69ef646baaeaa716ea6b\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" \"74b842a52de12e4cf74034f998ee98cf\" ...\n $ user_first_touch_timestamp   : chr  \"1701284050034000\" \"1698396193166000\" \"1698396193166000\" \"1698396193166000\" ...\n $ stream_id                    : chr  \"2758285888\" \"2758285888\" \"2758285888\" \"2758285888\" ...\n $ platform                     : chr  \"ANDROID\" \"ANDROID\" \"ANDROID\" \"ANDROID\" ...\n $ is_active_user               : logi  FALSE TRUE TRUE TRUE TRUE TRUE ...\n $ event_previous_timestamp     : chr  NA \"1703035993871001\" \"1703134211021004\" \"1703036243245008\" ...\n $ ga_session_id                : chr  \"1702888810\" \"1703134160\" \"1703134160\" \"1703134160\" ...\n $ ga_session_number            : chr  \"10\" \"52\" \"52\" \"52\" ...\n $ firebase_event_origin        : chr  \"auto\" \"auto\" \"app\" \"auto\" ...\n $ entrances                    : chr  NA \"1\" NA NA ...\n $ firebase_screen_id           : chr  NA \"-8779596609919170096\" \"-8779596609919170096\" \"-8779596609919170096\" ...\n $ engaged_session_event        : chr  NA \"1\" \"1\" \"1\" ...\n $ firebase_screen_class        : chr  NA \"UnityPlayerActivity\" \"UnityPlayerActivity\" \"UnityPlayerActivity\" ...\n $ level                        : chr  NA NA \"1\" NA ...\n $ success                      : chr  NA NA \"0\" NA ...\n $ value                        : chr  NA NA \"0\" NA ...\n $ engagement_time_msec         : chr  NA NA NA \"114189\" ...\n $ session_engaged              : chr  NA NA NA NA ...\n $ firebase_previous_class      : chr  NA NA NA NA ...\n $ firebase_previous_id         : chr  NA NA NA NA ...\n $ update_with_analytics        : chr  NA NA NA NA ...\n $ system_app                   : chr  NA NA NA NA ...\n $ previous_first_open_count    : chr  NA NA NA NA ...\n $ system_app_update            : chr  NA NA NA NA ...\n $ firebase_conversion          : chr  NA NA NA NA ...\n $ source                       : chr  NA NA NA NA ...\n $ medium                       : chr  NA NA NA NA ...\n $ campaign_info_source         : chr  NA NA NA NA ...\n $ previous_os_version          : chr  NA NA NA NA ...\n $ appnava_churn_prob           : chr  NA NA NA NA ...\n $ combined_nested_dfs          : num  0 0 0 0 0 0 0 0 0 0 ...\n $ analytics_storage            : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ ads_storage                  : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ uses_transient_token         : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ category                     : chr  \"mobile\" \"mobile\" \"mobile\" \"mobile\" ...\n $ mobile_brand_name            : chr  \"Samsung\" \"Samsung\" \"Samsung\" \"Samsung\" ...\n $ mobile_model_name            : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n $ mobile_marketing_name        : chr  \"Galaxy Grand 2\" \"Galaxy J1\" \"Galaxy J1\" \"Galaxy J1\" ...\n $ mobile_os_hardware_model     : chr  \"SM-G7102\" \"SM-J110H\" \"SM-J110H\" \"SM-J110H\" ...\n $ operating_system             : chr  \"Android\" \"Android\" \"Android\" \"Android\" ...\n $ operating_system_version     : chr  \"Android 4.4.2\" \"Android 4.4.4\" \"Android 4.4.4\" \"Android 4.4.4\" ...\n $ advertising_id               : chr  \"f28a3de1-340f-4d84-a491-ae5bc5c66a8a\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" \"6d58a8cf-8508-45cb-9f0a-41fbbc14d0c7\" ...\n $ language                     : chr  \"ar-ae\" \"ar-ae\" \"ar-ae\" \"ar-ae\" ...\n $ is_limited_ad_tracking       : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ time_zone_offset_seconds     : chr  \"7200\" \"7200\" \"7200\" \"7200\" ...\n $ city                         : chr  \"Kafr el-Sheikh\" \"\" \"\" \"\" ...\n $ country                      : chr  \"Egypt\" \"Jordan\" \"Jordan\" \"Jordan\" ...\n $ continent                    : chr  \"Africa\" \"Asia\" \"Asia\" \"Asia\" ...\n $ region                       : chr  \"Kafr El-Sheikh Governorate\" \"Amman Governorate\" \"Amman Governorate\" \"Amman Governorate\" ...\n $ sub_continent                : chr  \"Northern Africa\" \"Western Asia\" \"Western Asia\" \"Western Asia\" ...\n $ metro                        : chr  \"(not set)\" \"(not set)\" \"(not set)\" \"(not set)\" ...\n $ id                           : chr  \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" \"com.elakerem.focus\" ...\n $ version                      : chr  \"2.0.22\" \"2.0.22\" \"2.0.22\" \"2.0.22\" ...\n $ firebase_app_id              : chr  \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" \"1:2474473662:android:5047021a790dce42eb06ef\" ...\n $ install_source               : chr  \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" \"com.android.vending\" ...\n $ name                         : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ medium                       : chr  \"(none)\" \"(none)\" \"(none)\" \"(none)\" ...\n $ source                       : chr  \"(direct)\" \"(direct)\" \"(direct)\" \"(direct)\" ...\n $ manual_source                : chr  NA NA NA NA ...\n $ manual_medium                : chr  NA NA NA NA ...\n\n\nLets save the results before we begin our data analysis.\n\nwrite.csv(final_df3,\"plsfkinwork3.csv\")"
  }
]